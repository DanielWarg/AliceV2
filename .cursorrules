# Alice v2 Cursor Rules
*Instructions for AI coding assistant working on Alice v2*

## üöÄ MANDATORY STARTUP SEQUENCE

**ALWAYS read these files FIRST when starting a new chat:**

1. **`AGENTS.md`** - AI agent orientation and current project context
2. **`README.md`** - Project overview and architecture 
3. **`ALICE_SYSTEM_BLUEPRINT.md`** - Detailed system architecture
4. **`ROADMAP.md`** - Current development milestones

## üìã PROJECT CONTEXT

- **Current Phase**: Production Optimization Phase
- **Current Focus**: Fibonacci Mathematical Optimization (œÜ=1.618)
- **Language**: Swedish language optimization for Alice AI Assistant
- **Architecture**: Microservices with Docker orchestration

## üõ†Ô∏è DEVELOPMENT PRINCIPLES

- **Fibonacci Optimization**: All performance tuning uses Golden Ratio principles
- **Real Integration**: No mocks, test against real services with make up/down
- **Production Ready**: Everything deployment-ready from day 1
- **Observable**: Structured logging and real-time monitoring
- **Security First**: Guardian system provides brownout protection

## üîß WORKFLOW

1. **Start**: Read AGENTS.md for current context and priorities
2. **Understand**: Check ALICE_SYSTEM_BLUEPRINT.md for architecture
3. **Plan**: Use TodoWrite tool to track progress
4. **Implement**: Follow Fibonacci optimization principles
5. **Test**: Verify all services healthy with docker ps
6. **Monitor**: Check training progress and cache performance

## üéØ CURRENT SYSTEM STATUS

- **Services**: orchestrator (8000), guardian (8787), nlu (9002), cache (6379)
- **Training**: Fibonacci cache optimization with œÜ=1.618
- **Documentation**: Auto-synced via pre-commit hooks and GitHub Actions
- **Cache Target**: 40%+ hit rate (from 10% baseline)

## üìä KEY METRICS

- **Cache Hit Rate**: Monitor via scripts/fibonacci_simple_training.py
- **Response Time**: Target sub-200ms with Fibonacci scaling
- **System Health**: All services must show (healthy) in docker ps
- **Documentation**: All .md files auto-synced and validated

## üö® CRITICAL RULES

- **Never commit** without pre-commit hooks passing
- **Always use** TodoWrite for task tracking
- **Follow** Fibonacci principles in optimization
- **Keep** documentation synchronized
- **Test** with real services, not mocks

---

*Updated: 2025-09-06 | For: Alice v2 Production System*
- Swedish language support

## üö® IMPORTANT REMINDERS

- Never commit Swedish text to documentation (except `docs/archive/`)
- Always use `make up` for development stack
- **Ollama Setup**: Start local Ollama with `ollama serve` before running tests
- **Dev-Proxy Config**: Ensure `ops/Caddyfile` points to `host.docker.internal:11434` for Ollama
- Test with `python3 eval/harness.py` for quality gates validation
- Monitor real-time metrics via HUD at `http://localhost:18000/hud`
- Follow established code conventions (FastAPI + Pydantic, structlog)
- **Intent-Guard**: Use Swedish regex patterns for deterministic classification
- **Cache Optimization**: Use micro_key with canonical_prompt for better hits

---

**Remember**: This is a production-ready AI assistant platform. Every change must maintain quality, safety, and observability standards.
