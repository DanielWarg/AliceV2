
services:
  guardian:
    build:
      context: ./services/guardian
      dockerfile: Dockerfile
    container_name: alice-guardian
    restart: unless-stopped
    init: true
    tty: false
    stdin_open: false
    stop_grace_period: 15s
    environment:
      - GUARD_RAM_SOFT=0.80
      - GUARD_RAM_HARD=0.92
      - GUARD_RECOVER_RAM=0.70
      - GUARD_CPU_SOFT=0.80
      - GUARD_TEMP_C_HARD=85
      - GUARD_BATTERY_PCT_HARD=25
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8787/health"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: alice-orchestrator
    depends_on:
      guardian:
        condition: service_healthy
    restart: unless-stopped
    init: true
    tty: false
    stdin_open: false
    stop_grace_period: 15s
    environment:
      - API_BASE=http://orchestrator:8000
      - GUARDIAN_HEALTH_URL=http://guardian:8787/health
      - LOG_DIR=/data/telemetry
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_HOST=http://host.docker.internal:11434
      - MICRO_MODEL=llama2:7b
      - MICRO_DRIVER_VERSION=2
      - LLM_PLANNER=llama3.2:1b-instruct-q4_K_M
      - PLANNER_TIMEOUT_MS=8000
      - PLANNER_REPAIR_TIMEOUT_MS=200
      - LLM_TIMEOUT_MS=16000
      - PLANNER_NUM_CTX=768
      - PLANNER_NUM_PREDICT=80
      - OLLAMA_KEEP_ALIVE=30m
      - SECURITY_ENFORCE=true
      - PLANNER_DEBUG_DUMP=1
      - PLANNER_DEBUG_DIR=data/telemetry/planner_raw
      - PLANNER_NO_FALLBACK=1
    volumes:
      - ./data/telemetry:/data/telemetry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 15s

  loadgen:
    build:
      context: ./services/loadgen
      dockerfile: Dockerfile
    container_name: alice-loadgen
    depends_on:
      orchestrator:
        condition: service_started
      guardian:
        condition: service_healthy
    environment:
      - API_BASE=http://orchestrator:8000
      - GUARD_HEALTH=http://guardian:8787/health
      - SLO_BROWNOUT_TRIGGER_MS=150
      - RECOVER_S=60
      - MEMORY_BALLOON_GB=4
      - CPU_THREADS=4
      - DEEP_CONCURRENCY=2
    volumes:
      - ./data/telemetry:/data/telemetry
    restart: "no"
    profiles:
      - loadtest

  eval:
    build:
      context: ./services/eval
      dockerfile: Dockerfile
    container_name: alice-eval
    depends_on:
      orchestrator:
        condition: service_started
      guardian:
        condition: service_healthy
    environment:
      - API_BASE=http://orchestrator:8000
    volumes:
      - ./data/tests:/data/tests
    restart: "no"
    profiles:
      - eval

  voice:
    build:
      context: ./services/voice
      dockerfile: Dockerfile
    container_name: alice-voice
    restart: unless-stopped
    environment:
      - WHISPER_MODEL=base
      - TTS_MODEL_PATH=/models/piper
    volumes:
      - ./data/voice_cache:/data/voice_cache
      - ./models:/models
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: alice-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  dashboard:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: alice-dashboard
    restart: unless-stopped
    init: true
    tty: false
    stdin_open: false
    stop_grace_period: 15s
    volumes:
      - ./data:/data
    profiles:
      - dashboard
    ports:
      - "8501:8501"

  dev-proxy:
    image: caddy:2
    container_name: alice-dev-proxy
    depends_on:
      orchestrator:
        condition: service_healthy
      guardian:
        condition: service_healthy
    ports:
      - "18000:80"
    volumes:
      - ./ops/Caddyfile:/etc/caddy/Caddyfile:ro
    restart: unless-stopped

  n8n-db:
    image: postgres:15-alpine
    container_name: alice-n8n-db
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=${N8N_DB_PASSWORD:-n8npass}
      - POSTGRES_DB=n8n
    volumes:
      - ./data/n8n_db:/var/lib/postgresql/data
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    container_name: alice-n8n
    depends_on:
      - n8n-db
    environment:
      - N8N_HOST=localhost
      - N8N_PROTOCOL=http
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - N8N_PORT=5678
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-change-me}
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=localhost
      - N8N_SMTP_PORT=587
      - N8N_SMTP_USER=
      - N8N_SMTP_PASS=
      - N8N_SMTP_SENDER=alice@localhost
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD:-n8npass}
      - N8N_WEBHOOK_URL=http://dev-proxy/webhook
    volumes:
      - ./data/n8n:/home/node/.n8n
    restart: unless-stopped
    ports:
      - "5678:5678"

  ollama:
    image: ollama/ollama:latest
    container_name: alice-ollama
    restart: unless-stopped
    volumes:
      - ollama:/root/.ollama
    environment:
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_KEEP_ALIVE=30
      - OMP_NUM_THREADS=2
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:11434/api/tags"]
      interval: 10s
      timeout: 5s
      retries: 30

  nlu:
    build:
      context: ./
      dockerfile: services/nlu/Dockerfile
    container_name: alice-nlu
    restart: unless-stopped
    environment:
      - NLU_LANG=sv
      - NLU_SIM_THRESH=0.62
      - NLU_MARGIN_MIN=0.06
      - NLU_XNLI_ENABLE=false
      - E5_ONNX_PATH=/models/e5-small.onnx
      - E5_TOKENIZER_JSON=/models/e5-tokenizer.json
      # XNLI avst√§ngt tills ONNX finns
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9002/health"]
      interval: 10s
      timeout: 3s
      retries: 20
    volumes:
      - ./models:/models:ro

  curator:
    build:
      context: ./
      dockerfile: services/curator/Dockerfile
    container_name: alice-curator
    environment:
      - LOG_DIR=/data/telemetry
      - DATASETS_DIR=/data/datasets
    volumes:
      - ./data/telemetry:/data/telemetry
      - ./data/datasets:/data/datasets
    profiles:
      - curator

  memory:
    build:
      context: ./services/memory
      dockerfile: Dockerfile
    container_name: alice-memory
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - MEMORY_TTL_DAYS=7
      - EMBEDDING_MODEL=sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
    volumes:
      - ./data/embeddings:/data/embeddings
    ports:
      - "8300:8300"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/health"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

  # scheduler: (disabled - use host cron instead)
  #   image: browt/supercronic:latest
  #   container_name: alice-scheduler
  #   restart: unless-stopped
  #   depends_on:
  #     orchestrator:
  #       condition: service_started
  #   volumes:
  #     - ./ops/schedule.cron:/etc/crontab:ro
  #     - ./:/workspace
  #     - ./logs:/workspace/logs
  #     - ./data:/workspace/data
  #     - /var/run/docker.sock:/var/run/docker.sock

volumes:
  telemetry_data:
    driver: local
  ollama:
    driver: local
  redis_data:
    driver: local
